name: Build and Release TDLib

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux-x86_64:
    name: 'Build TDLib / Linux x86_64 glibc'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build TDLib
        run: |
          cd packages/prebuilt-tdlib/ci
          ./build-linux.sh ${GITHUB_REF#refs/tags/} x86_64-linux-gnu.2.22
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-x86_64-glibc
          path: ${{ env.TO_UPLOAD }}

  build-linux-arm64:
    name: 'Build TDLib / Linux arm64 glibc (cross)'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build TDLib
        run: |
          cd packages/prebuilt-tdlib/ci
          ./build-linux.sh ${GITHUB_REF#refs/tags/} aarch64-linux-gnu.2.22
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-arm64-glibc
          path: ${{ env.TO_UPLOAD }}

  build-macos:
    name: 'Build TDLib / macOS universal'
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Build TDLib
        run: |
          cd packages/prebuilt-tdlib/ci
          ./build-macos.sh ${GITHUB_REF#refs/tags/}
      - name: Verify codesigning
        run: codesign -v ${{ env.TO_UPLOAD }}/libtdjson.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos
          path: ${{ env.TO_UPLOAD }}

  build-windows-x86_64:
    name: 'Build TDLib / Windows x86_64'
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'tdlib/td'
          ref: ${GITHUB_REF#refs/tags/}
      - name: vcpkg cache
        uses: actions/cache@v4
        with:
          path: '~\AppData\Local\vcpkg\archives'
          key: windows-vcpkg-${{ github.run_id }}
          restore-keys: |
            windows-vcpkg-
      - name: Install dependencies using vcpkg
        run: vcpkg install gperf:x64-windows-static openssl:x64-windows-static zlib:x64-windows-static
      - name: Build TDLib
        run: |
          mkdir to-upload
          mkdir build
          cd build
          cmake -A x64 `
            -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -DOPENSSL_USE_STATIC_LIBS=TRUE -DZLIB_USE_STATIC_LIBS=TRUE ..
          cmake --build . --target tdjson --config Release --parallel 4
          cd ..
          cp build\Release\tdjson.dll to-upload\tdjson.dll
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-windows-x86_64
          path: to-upload

  create_release:
    name: Create GitHub release
    needs: [build-linux-x86_64, build-linux-arm64, build-macos, build-windows-x86_64]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: TDLib ${{ github.ref }}
          draft: false
          prerelease: false

  upload_assets:
    name: Upload release assets
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact: [tdlib-linux-x86_64-glibc, tdlib-linux-arm64-glibc, tdlib-macos, tdlib-windows-x86_64]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
      - name: Zip artifact
        run: zip -r ${{ matrix.artifact }}.zip ./*
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact }}.zip
          asset_name: ${{ matrix.artifact }}.zip
          asset_content_type: application/zip