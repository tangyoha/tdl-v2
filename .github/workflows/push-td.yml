name: Pre-built TDLib
# This workflow can be executed using a command like this:
# gh workflow run prebuilt-tdlib.yml --ref develop -f tdlib=v1.8.0 -f npm-patch=0
on:
  workflow_dispatch:
    inputs:
      tdlib:
        description: 'TDLib git ref (e.g. v1.8.0 or a commit hash)'
        type: string
        required: true
# NOTE: The ZLIB_USE_STATIC_LIBS option requires CMake >= 3.24
jobs:
  build-linux-x86_64:
    name: 'Build TDLib / Linux x86_64 glibc'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build TDLib
        run: |
          cd packages/prebuilt-tdlib/ci
          ./build-linux.sh ${{ inputs.tdlib }} x86_64-linux-gnu.2.22
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-x86_64-glibc
          path: ${{ env.TO_UPLOAD }}

  build-linux-arm64:
    name: 'Build TDLib / Linux arm64 glibc (cross)'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build TDLib
        run: |
          cd packages/prebuilt-tdlib/ci
          ./build-linux.sh ${{ inputs.tdlib }} aarch64-linux-gnu.2.22
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-arm64-glibc
          path: ${{ env.TO_UPLOAD }}

  build-macos-x86_64:
    name: 'Build TDLib / macOS x86_64'
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Build TDLib
        run: |
          cd packages/prebuilt-tdlib/ci
          ./build-macos.sh ${{ inputs.tdlib }}
      - uses: actions/upload-artifact@v4
        with:
          name: temp-macos-x86_64
          path: ${{ env.TO_UPLOAD }}

  build-macos-arm64:
    name: 'Build TDLib / macOS arm64'
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Build TDLib
        run: |
          cd packages/prebuilt-tdlib/ci
          ./build-macos.sh ${{ inputs.tdlib }}
      - name: Verify codesigning
        run: codesign -v ${{ env.TO_UPLOAD }}/libtdjson.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: temp-macos-arm64
          path: ${{ env.TO_UPLOAD }}

  build-macos:
    name: Create universal macOS shared library
    needs: [build-macos-x86_64, build-macos-arm64]
    runs-on: macos-13
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: temp-macos-*
      - name: Combine shared libraries
        run: |
          mkdir -p to-upload
          lipo temp-macos-x86_64/libtdjson.dylib temp-macos-arm64/libtdjson.dylib \
            -output to-upload/libtdjson.dylib -create
          cd to-upload
          file libtdjson.dylib
          otool -L libtdjson.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos
          path: to-upload

  build-windows-x86_64:
    name: 'Build TDLib / Windows x86_64'
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'tdlib/td'
          ref: ${{ inputs.tdlib }}
      - name: vcpkg cache
        uses: actions/cache@v4
        with:
          path: '~\AppData\Local\vcpkg\archives'
          key: windows-vcpkg-${{ github.run_id }}
          restore-keys: |
            windows-vcpkg-
      - name: Install dependencies using vcpkg
        run: vcpkg install gperf:x64-windows-static openssl:x64-windows-static zlib:x64-windows-static
      - name: CMake version
        run: cmake --version
      - name: Build TDLib
        run: |
          mkdir to-upload
          mkdir build
          cd build
          cmake -A x64 `
            -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -DOPENSSL_USE_STATIC_LIBS=TRUE -DZLIB_USE_STATIC_LIBS=TRUE ..
          cmake --build . --target tdjson --config Release --parallel 4
          cd ..
          cp build\Release\tdjson.dll to-upload\tdjson.dll
          vcpkg list | Select-String openssl,zlib
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-windows-x86_64
          path: to-upload

  create-release:
    name: 'Create Release and Upload Artifacts'
    needs: [build-linux-x86_64, build-linux-arm64, build-macos, build-windows-x86_64]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: tdlib-${{ inputs.tdlib }}
          release_name: TDLib ${{ inputs.tdlib }}
          draft: false
          prerelease: false

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload Linux x86_64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/tdlib-linux-x86_64-glibc/libtdjson.so
          asset_name: libtdjson-linux-x86_64.so
          asset_content_type: application/octet-stream

      - name: Upload Linux ARM64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/tdlib-linux-arm64-glibc/libtdjson.so
          asset_name: libtdjson-linux-arm64.so
          asset_content_type: application/octet-stream

      - name: Upload macOS Universal Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/tdlib-macos/libtdjson.dylib
          asset_name: libtdjson-macos-universal.dylib
          asset_content_type: application/octet-stream

      - name: Upload Windows x86_64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/tdlib-windows-x86_64/tdjson.dll
          asset_name: tdjson-windows-x86_64.dll
          asset_content_type: application/octet-stream